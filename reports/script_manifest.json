{
  "analyze_depth": {
    "describe": {
      "dependencies": [
        "optional:ib_async",
        "config:ML_BASE_PATH"
      ],
      "description": "Analyze market depth snapshots or streams.",
      "examples": [
        "python -m src.tools.analyze_depth --describe"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--data-dir": {
          "required": false,
          "type": "str"
        },
        "--date": {
          "required": false,
          "type": "str"
        },
        "--output": {
          "required": false,
          "type": "str"
        },
        "--plot": {
          "required": false,
          "type": "flag"
        },
        "--show-describe": {
          "required": false,
          "type": "flag"
        },
        "--symbol": {
          "required": false,
          "type": "str"
        }
      },
      "name": "analyze_depth",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "analysis summary JSON"
      }
    },
    "path": "src/tools/analyze_depth.py"
  },
  "analyze_root_files": {
    "describe": {
      "dependencies": [
        "config:PROJECT_ROOT"
      ],
      "description": "Audit stray Python files in project root and propose target locations.",
      "examples": [
        {
          "command": "python -m src.tools.analysis.analyze_root_files --describe",
          "description": "Show schema"
        },
        {
          "command": "python -m src.tools.analysis.analyze_root_files",
          "description": "Run analysis (text)"
        },
        {
          "command": "python -m src.tools.analysis.analyze_root_files --json",
          "description": "Run analysis (JSON)"
        }
      ],
      "input_schema": {
        "properties": {
          "--json": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "description": "Print schema and exit",
          "type": "flag"
        },
        "--json": {
          "description": "Emit JSON instead of human text",
          "type": "flag"
        }
      },
      "name": "analyze_root_files",
      "output_schema": {
        "properties": {
          "move_plan": {
            "type": "array"
          }
        },
        "type": "object"
      },
      "outputs": {
        "root_cleanup_move_plan.csv": {
          "description": "CSV file containing move plan (always written)",
          "type": "file"
        },
        "stdout": {
          "description": "Report (text) or JSON object with move plan when --json provided",
          "type": "text|json"
        }
      }
    },
    "path": "src/tools/analysis/analyze_root_files.py"
  },
  "analyze_scripts": {
    "describe": {
      "dependencies": [
        "config:PROJECT_ROOT"
      ],
      "description": "Inventory & classify project Python scripts; produces CSV + JSON summaries.",
      "examples": [
        {
          "command": "python -m src.tools.analysis.analyze_scripts --describe",
          "description": "Show schema"
        },
        {
          "command": "python -m src.tools.analysis.analyze_scripts",
          "description": "Analyze scripts"
        }
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "description": "Print this schema and exit",
          "required": false,
          "type": "flag"
        },
        "--skip-pyright": {
          "description": "Skip pyright type analysis",
          "required": false,
          "type": "flag"
        },
        "--verbose": {
          "description": "Enable verbose logging",
          "required": false,
          "type": "flag"
        }
      },
      "name": "analyze_scripts",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "duplicates.json": {
          "description": "Duplicate file analysis placeholder",
          "type": "file"
        },
        "import_graph.json": {
          "description": "Simplified import graph",
          "type": "file"
        },
        "scripts_groups.json": {
          "description": "Proposed grouping / target paths",
          "type": "file"
        },
        "scripts_inventory.json": {
          "description": "Inventory of analyzed scripts with metrics",
          "type": "file"
        },
        "scripts_move_plan.csv": {
          "description": "CSV move/organization plan",
          "type": "file"
        },
        "stdout": {
          "description": "Summary JSON (tool results or schema)",
          "type": "json"
        }
      }
    },
    "path": "src/tools/analysis/analyze_scripts.py"
  },
  "auto_backfill_from_warrior": {
    "describe": {
      "dependencies": [
        "optional:databento",
        "config:DATABENTO_API_KEY",
        "config:L2_BACKFILL_WINDOW_ET",
        "config:SYMBOL_MAPPING_FILE",
        "config:IB_HOST",
        "config:IB_GATEWAY_PAPER_PORT",
        "config:IB_PAPER_PORT",
        "config:IB_DOWNLOADS_DIRNAME"
      ],
      "description": "Automatically backfill historical L2 (09:25\u201311:00 ET) for Warrior list trading days using programmatic orchestrator. By default also downloads IB hourly (RTH) and 1-sec bars (09:00\u201311:00) needed for those tasks.",
      "examples": [
        "python -m src.tools.auto_backfill_from_warrior --since 3",
        "python -m src.tools.auto_backfill_from_warrior --last 5 --dry-run",
        "python -m src.tools.auto_backfill_from_warrior --date 2025-07-29 --symbol AAPL"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--date": {
          "description": "Single trading day YYYY-MM-DD (filters Warrior tasks; fallback creates ad-hoc task if Warrior list absent)",
          "required": false,
          "type": "str"
        },
        "--dry-run": {
          "required": false,
          "type": "flag"
        },
        "--end": {
          "description": "End date YYYY-MM-DD (inclusive)",
          "required": false,
          "type": "str"
        },
        "--fetch-bars": {
          "description": "Download IB hourly and 1-sec bars before L2 backfill (default: enabled)",
          "required": false,
          "type": "flag"
        },
        "--force": {
          "required": false,
          "type": "flag"
        },
        "--force-bars": {
          "required": false,
          "type": "flag"
        },
        "--ib-host": {
          "required": false,
          "type": "str"
        },
        "--ib-port": {
          "required": false,
          "type": "int"
        },
        "--last": {
          "description": "Keep only last N distinct dates after other filters",
          "required": false,
          "type": "int"
        },
        "--max-tasks": {
          "required": false,
          "type": "int"
        },
        "--max-workers": {
          "description": "Override parallel worker count (default env L2_MAX_WORKERS or 4)",
          "required": false,
          "type": "int"
        },
        "--no-fetch-bars": {
          "description": "Disable IB hourly and 1-sec bar downloads (opt-out)",
          "required": false,
          "type": "flag"
        },
        "--since": {
          "description": "Include tasks with trading_day >= today - N days",
          "required": false,
          "type": "int"
        },
        "--start": {
          "description": "Start date YYYY-MM-DD (inclusive)",
          "required": false,
          "type": "str"
        },
        "--strict": {
          "required": false,
          "type": "flag"
        },
        "--symbol": {
          "description": "Filter to a single local symbol; also used for ad-hoc fallback with explicit dates",
          "required": false,
          "type": "str"
        },
        "--use-tws": {
          "required": false,
          "type": "flag"
        }
      },
      "name": "auto_backfill_from_warrior",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "progress + single SUMMARY line"
      }
    },
    "path": "src/tools/auto_backfill_from_warrior.py"
  },
  "backfill_l2_from_warrior": {
    "describe": {
      "dependencies": [
        "optional:databento",
        "config:DATABENTO_API_KEY",
        "config:L2_BACKFILL_WINDOW_ET",
        "config:SYMBOL_MAPPING_FILE"
      ],
      "description": "Backfill historical L2 (09:25-11:00 ET) from DataBento for each Warrior list trading day.",
      "examples": [
        "python -m src.tools.backfill_l2_from_warrior --date 2025-07-29",
        "python -m src.tools.backfill_l2_from_warrior --start 2025-07-01 --end 2025-07-10 --symbol AAPL"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--date": {
          "required": false,
          "type": "str"
        },
        "--dry-run": {
          "required": false,
          "type": "flag"
        },
        "--end": {
          "required": false,
          "type": "str"
        },
        "--force": {
          "required": false,
          "type": "flag"
        },
        "--last": {
          "required": false,
          "type": "int"
        },
        "--max-tasks": {
          "required": false,
          "type": "int"
        },
        "--since": {
          "required": false,
          "type": "str"
        },
        "--start": {
          "required": false,
          "type": "str"
        },
        "--strict": {
          "required": false,
          "type": "flag"
        },
        "--symbol": {
          "required": false,
          "type": "str"
        }
      },
      "name": "backfill_l2_from_warrior",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "progress log"
      }
    },
    "path": "src/tools/backfill_l2_from_warrior.py"
  },
  "build_export_manifest": {
    "describe": {
      "dependencies": [
        "optional:jsonschema",
        "config:PROMOTION_RULE_JSON (repo root promotion.rule.json by default)"
      ],
      "description": "Validate TF_1 export manifest against Trading promotion rules and schema.",
      "examples": [
        "python -m src.tools.validate_export_manifest --manifest tf1_export_manifest.json"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--manifest": {
          "required": true,
          "type": "path"
        },
        "--model-dir": {
          "description": "Directory containing production.alias for non-dry emissions",
          "required": false,
          "type": "path"
        },
        "--rule": {
          "description": "Override path to promotion.rule.json",
          "required": false,
          "type": "path"
        }
      },
      "name": "validate_export_manifest",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "JSON validation result"
      }
    },
    "path": "src/tools/analysis/build_export_manifest.py"
  },
  "evaluate_and_emit_metrics": {
    "describe": {
      "description": "Compute Sharpe and Max Drawdown from returns or PnL and emit manifest-ready metrics.",
      "examples": [
        "--returns 0.01,-0.005,0.007",
        "--pnl 10,-5,2,3"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "pnl": "comma-separated list of floats",
        "returns": "comma-separated list of floats"
      },
      "name": "evaluate_and_emit_metrics",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "metrics": [
          "sharpe|sharpe_sim",
          "max_drawdown|max_drawdown_sim",
          "f1|f1_macro"
        ]
      }
    },
    "path": "src/tools/analysis/evaluate_and_emit_metrics.py"
  },
  "fix_hardcoded_paths": {
    "describe": {
      "dependencies": [
        "pathlib",
        "re"
      ],
      "description": "Fix hardcoded paths throughout the codebase using ConfigManager",
      "input_schema": {
        "type": "object"
      },
      "inputs": [
        "--dry-run",
        "--verbose"
      ],
      "name": "fix_hardcoded_paths.py",
      "output_schema": {
        "type": "object"
      },
      "outputs": [
        "Modified Python files",
        "console report"
      ]
    },
    "path": "src/tools/setup/fix_hardcoded_paths.py"
  },
  "generate_coverage_analysis": {
    "describe": {
      "dependencies": [
        "config:PYTHONPATH"
      ],
      "description": "Parse coverage.xml or coverage.json and produce aggregated coverage summary JSON report.",
      "examples": [
        {
          "command": "python -m src.tools.analysis.generate_coverage_analysis --describe",
          "description": "Show schema"
        },
        {
          "command": "python -m src.tools.analysis.generate_coverage_analysis",
          "description": "Generate coverage analysis (after running tests with coverage)"
        }
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "description": "Print schema metadata and exit",
          "type": "flag"
        }
      },
      "name": "generate_coverage_analysis",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "reports/coverage_analysis.json": {
          "description": "Full structured coverage analysis written to disk",
          "type": "file"
        },
        "stdout": {
          "description": "When run normally, prints high-level summary stats; with --describe prints schema",
          "type": "json"
        }
      }
    },
    "path": "src/tools/analysis/generate_coverage_analysis.py"
  },
  "quick_start": {
    "describe": {
      "dependencies": [
        "config:IB_HOST",
        "config:IB_PAPER_PORT",
        "config:IB_LIVE_PORT"
      ],
      "description": "Display project structure, IB setup guidance, and usage examples (describe-only stub).",
      "examples": [
        "python -m src.tools.quick_start --describe"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {},
      "name": "quick_start",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "Guidance text or schema"
      }
    },
    "path": "src/tools/quick_start.py"
  },
  "record_depth": {
    "describe": {
      "dependencies": [
        "config:IB_HOST",
        "config:IB_GATEWAY_PAPER_PORT",
        "config:IB_GATEWAY_LIVE_PORT",
        "config:IB_PAPER_PORT",
        "config:IB_LIVE_PORT",
        "optional:ibapi"
      ],
      "description": "Record Level 2 market depth snapshots and raw messages (nanosecond timestamps).",
      "examples": [
        "python -m src.tools.record_depth --symbol AAPL --duration 60",
        "python -m src.tools.record_depth --symbol MSFT --paper --levels 5"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--client-id": {
          "default": 1,
          "type": "int"
        },
        "--duration": {
          "default": null,
          "type": "int"
        },
        "--host": {
          "default": "127.0.0.1",
          "type": "str"
        },
        "--interval": {
          "default": 100,
          "type": "int"
        },
        "--levels": {
          "default": 10,
          "type": "int"
        },
        "--output": {
          "default": "./data/level2",
          "type": "path"
        },
        "--paper/--live": {
          "default": true,
          "type": "flag"
        },
        "--port": {
          "default": null,
          "type": "int"
        },
        "--symbol": {
          "required": true,
          "type": "str"
        }
      },
      "name": "record_depth",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "files": [
          "data/level2/<SYMBOL>/*_snapshots_*.parquet",
          "data/level2/<SYMBOL>/*_messages_*.json",
          "data/level2/<SYMBOL>/session_stats_*.json"
        ],
        "stdout": "Progress + summary logs"
      },
      "ports": {
        "gateway_live": 4001,
        "gateway_paper": 4002,
        "tws_live": 7496,
        "tws_paper": 7497
      },
      "version": "1.0.0"
    },
    "path": "src/tools/record_depth.py"
  },
  "run_trading_fully_automated": {
    "describe": {
      "defaults": {
        "client_id": 1,
        "gateway_live_port": 4001,
        "gateway_paper_port": 4002,
        "host": "127.0.0.1"
      },
      "dependencies": [
        "src.automation.headless_gateway",
        "src.lib.ib_async_wrapper",
        "ib_async",
        "pandas"
      ],
      "description": "Fully automated trading pipeline (starts gateway, downloads data, runs analysis).",
      "env_keys": [
        "IB_USERNAME",
        "IB_PASSWORD",
        "IB_HOST",
        "IB_GATEWAY_PAPER_PORT",
        "IB_GATEWAY_LIVE_PORT",
        "IB_CLIENT_ID"
      ],
      "examples": [
        "python -m src.tools.run_trading_fully_automated --symbols TSLA",
        "python -m src.tools.run_trading_fully_automated --symbols AAPL MSFT --duration '5 D'",
        "python -m src.tools.run_trading_fully_automated --symbols SPY --bar-size '5 mins' --no-save"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": [
        "--symbols",
        "--duration",
        "--bar-size",
        "--live",
        "--no-save",
        "--verbose"
      ],
      "name": "run_trading_fully_automated",
      "output_schema": {
        "type": "object"
      },
      "outputs": [
        "data/automated_trading/*.parquet",
        "data/automated_trading/*.csv",
        "data/automated_trading/trading_summary_*.txt"
      ],
      "version": "1.0.0"
    },
    "path": "src/tools/run_trading_fully_automated.py"
  },
  "script_inventory_analyzer": {
    "describe": {
      "dependencies": [
        "config:PROJECT_ROOT"
      ],
      "description": "Deprecated legacy script inventory analyzer (use analyze_scripts instead).",
      "examples": [
        {
          "command": "python -m src.tools.analysis.script_inventory_analyzer --describe",
          "description": "Show schema"
        }
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "description": "Show schema and exit",
          "type": "flag"
        }
      },
      "name": "script_inventory_analyzer",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": {
          "description": "Deprecation notice or schema JSON",
          "type": "text"
        }
      }
    },
    "path": "src/tools/analysis/script_inventory_analyzer.py"
  },
  "self_check": {
    "describe": {
      "ci_checkout_submodules": false,
      "cross_consume_workflow": true,
      "docs_link_contracts": {
        "copilot": false,
        "readme": true
      },
      "files_present": {
        "fixture": true,
        "rule": true,
        "schema": true
      },
      "fixture_schema_test_present": true,
      "input_schema": {
        "type": "object"
      },
      "observability_keys_test": true,
      "output_schema": {
        "type": "object"
      },
      "repo": "Trading",
      "submodule_commit": "5b340fe",
      "submodule_remote": "git@github.com:JSunRae/ml-contracts.git",
      "tests": {
        "fixture_schema": true,
        "validator_smoke": true
      },
      "validator_cli_present": true,
      "warnings": [
        "missing keys ['description'] (tolerated)"
      ]
    },
    "path": "src/tools/self_check.py"
  },
  "setup_automated_trading": {
    "error": "invalid JSON: Expecting value: line 1 column 1 (char 0) raw=",
    "path": "src/tools/setup/setup_automated_trading.py"
  },
  "setup_critical_fixes": {
    "error": "invalid JSON: Expecting value: line 1 column 1 (char 0) raw=/home/jrae/wsl projects/Trading/src/core/dataframe_safety.py:102: FutureWarning: Setting an item of incompatible dtype i",
    "path": "src/tools/setup/setup_critical_fixes.py"
  },
  "setup_ib_gateway": {
    "describe": {
      "defaults": {
        "client_id": 1,
        "gateway_live_port": 4001,
        "gateway_paper_port": 4002,
        "host": "127.0.0.1",
        "tws_live_port": 7496,
        "tws_paper_port": 7497
      },
      "description": "Generate IB Gateway config and helper scripts (enhanced Option D).",
      "env_keys": [
        "IB_HOST",
        "IB_GATEWAY_PAPER_PORT",
        "IB_GATEWAY_LIVE_PORT",
        "IB_PAPER_PORT",
        "IB_LIVE_PORT",
        "IB_CLIENT_ID",
        "IB_GATEWAY_START_CMD",
        "IB_USE_TWS"
      ],
      "examples": [
        "python -m src.tools.setup.setup_ib_gateway --guide",
        "python -m src.tools.setup.setup_ib_gateway --create-files --enhanced",
        "python -m src.tools.setup.setup_ib_gateway --create-files --enhanced --with-status --force"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": [
        "--guide",
        "--create-files",
        "--enhanced",
        "--force",
        "--with-status"
      ],
      "name": "setup_ib_gateway",
      "output_schema": {
        "type": "object"
      },
      "outputs": [
        "config/ib_gateway_config.json",
        "start_gateway.sh",
        "check_gateway_status.py"
      ],
      "version": "1.2.0"
    },
    "path": "src/tools/setup/setup_ib_gateway.py"
  },
  "system_analysis": {
    "describe": {
      "dependencies": [
        "config:IB_HOST",
        "config:IB_PAPER_PORT",
        "config:IB_LIVE_PORT",
        "config:IB_GATEWAY_PAPER_PORT",
        "config:IB_GATEWAY_LIVE_PORT",
        "config:IB_CLIENT_ID"
      ],
      "description": "Lightweight system + config environment summary (safe, no side effects).",
      "examples": [
        {
          "command": "python -m src.tools.system_analysis --describe",
          "description": "Show describe metadata"
        },
        {
          "command": "python -m src.tools.system_analysis",
          "description": "Run full system analysis"
        }
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {},
      "name": "system_analysis",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "System summary JSON or schema"
      }
    },
    "path": "src/tools/system_analysis.py"
  },
  "system_check_analysis": {
    "describe": {
      "dependencies": [
        "config:PROJECT_ROOT"
      ],
      "description": "Static summary style system/type check report (legacy, emits text).",
      "examples": [
        {
          "command": "python -m src.tools.analysis.system_check_analysis --describe",
          "description": "Show schema"
        }
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "description": "Show schema JSON and exit",
          "type": "flag"
        }
      },
      "name": "system_check_analysis",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": {
          "description": "Human-readable system/type check report or schema JSON",
          "type": "text"
        }
      }
    },
    "path": "src/tools/analysis/system_check_analysis.py"
  },
  "validate_env": {
    "error": "failed --describe: Traceback (most recent call last):\n  File \"/home/jrae/wsl projects/Trading/src/tools/validate_env.py\", line 16, in <modu",
    "path": "src/tools/validate_env.py"
  },
  "validate_export_manifest": {
    "describe": {
      "dependencies": [
        "optional:jsonschema",
        "config:PROMOTION_RULE_JSON (repo root promotion.rule.json by default)"
      ],
      "description": "Validate TF_1 export manifest against Trading promotion rules and schema.",
      "examples": [
        "python -m src.tools.validate_export_manifest --manifest tf1_export_manifest.json"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--manifest": {
          "required": true,
          "type": "path"
        },
        "--model-dir": {
          "description": "Directory containing production.alias for non-dry emissions",
          "required": false,
          "type": "path"
        },
        "--rule": {
          "description": "Override path to promotion.rule.json",
          "required": false,
          "type": "path"
        }
      },
      "name": "validate_export_manifest",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": "JSON validation result"
      }
    },
    "path": "src/tools/validate_export_manifest.py"
  },
  "validate_ml_structure": {
    "describe": {
      "dependencies": [
        "config:PROJECT_ROOT"
      ],
      "description": "Validate presence and structure of ML-related modules (legacy text tool).",
      "examples": [
        {
          "command": "python -m src.tools.analysis.validate_ml_structure --describe",
          "description": "Show schema"
        }
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "description": "Show schema JSON and exit",
          "type": "flag"
        }
      },
      "name": "validate_ml_structure",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "stdout": {
          "description": "Human-readable validation report or schema JSON",
          "type": "text"
        }
      }
    },
    "path": "src/tools/analysis/validate_ml_structure.py"
  },
  "verify_setup": {
    "describe": {
      "dependencies": [
        "config:IB_HOST",
        "config:IB_GATEWAY_PAPER_PORT",
        "config:IB_GATEWAY_LIVE_PORT",
        "config:IB_PAPER_PORT",
        "config:IB_LIVE_PORT",
        "optional:ib_async"
      ],
      "description": "Verify installation, dependencies, configuration files, and (optionally) IB connectivity.",
      "examples": [
        "python -m src.tools.verify_setup --describe",
        "python -m src.tools.verify_setup --skip-ib-test",
        "python -m src.tools.verify_setup --verbose"
      ],
      "input_schema": {
        "type": "object"
      },
      "inputs": {
        "--describe": {
          "default": false,
          "required": false,
          "type": "flag"
        },
        "--skip-ib-test": {
          "default": false,
          "required": false,
          "type": "flag"
        },
        "--verbose": {
          "default": false,
          "required": false,
          "type": "flag"
        }
      },
      "name": "verify_setup",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "files": [],
        "stdout": "JSON summary of verification checks"
      },
      "ports": {
        "gateway_live": 4001,
        "gateway_paper": 4002,
        "tws_live": 7496,
        "tws_paper": 7497
      },
      "version": "1.0.0"
    },
    "path": "src/tools/verify_setup.py"
  },
  "warrior_update": {
    "describe": {
      "arguments": [
        {
          "choices": [
            "main",
            "recent",
            "mark-downloaded",
            "trainlist"
          ],
          "default": "main",
          "name": "--mode"
        },
        {
          "default": 0,
          "name": "--start-row",
          "type": "int"
        },
        {
          "default": null,
          "name": "--only-stock",
          "type": "str"
        },
        {
          "example": "30 mins,1 min",
          "name": "--bar-sizes",
          "type": "str"
        },
        {
          "default": "INFO",
          "name": "--log-level",
          "type": "str"
        }
      ],
      "env_keys": [
        "ML_BASE_PATH",
        "ML_BACKUP_PATH",
        "IB_HOST",
        "IB_PAPER_PORT",
        "IB_LIVE_PORT",
        "IB_GATEWAY_PAPER_PORT",
        "IB_GATEWAY_LIVE_PORT"
      ],
      "input_schema": {
        "type": "object"
      },
      "modes": {
        "main": "Iterate warrior list rows; 1 min (5 days) + other bars (1 day).",
        "mark-downloaded": "Reconcile existing downloaded files with tracking (no downloads).",
        "recent": "30 mins only for yesterday for listed symbols.",
        "trainlist": "Generate training list entries where 1 secs + 1 min exist for a date."
      },
      "name": "warrior_update",
      "output_schema": {
        "type": "object"
      },
      "outputs": {
        "logs": "INFO level progress",
        "side_effects": "Downloaded parquet/ftr files into ML base path"
      },
      "summary": "Download recent historical data for Warrior Trading symbols across bar sizes.",
      "version": 1,
      "warnings": [
        "missing keys ['description'] (tolerated)"
      ]
    },
    "path": "src/tools/warrior_update.py"
  }
}